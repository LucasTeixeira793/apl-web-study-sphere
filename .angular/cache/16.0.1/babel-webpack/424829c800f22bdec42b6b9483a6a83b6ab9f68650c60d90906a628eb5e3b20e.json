{"ast":null,"code":"(function () {\n  if (typeof Prism === 'undefined' || typeof document === 'undefined') {\n    return;\n  }\n\n  /**\n   * Plugin name which is used as a class name for <pre> which is activating the plugin\n   *\n   * @type {string}\n   */\n  var PLUGIN_NAME = 'line-numbers';\n\n  /**\n   * Regular expression used for determining line breaks\n   *\n   * @type {RegExp}\n   */\n  var NEW_LINE_EXP = /\\n(?!$)/g;\n\n  /**\n   * Global exports\n   */\n  var config = Prism.plugins.lineNumbers = {\n    /**\n     * Get node for provided line number\n     *\n     * @param {Element} element pre element\n     * @param {number} number line number\n     * @returns {Element|undefined}\n     */\n    getLine: function (element, number) {\n      if (element.tagName !== 'PRE' || !element.classList.contains(PLUGIN_NAME)) {\n        return;\n      }\n      var lineNumberRows = element.querySelector('.line-numbers-rows');\n      if (!lineNumberRows) {\n        return;\n      }\n      var lineNumberStart = parseInt(element.getAttribute('data-start'), 10) || 1;\n      var lineNumberEnd = lineNumberStart + (lineNumberRows.children.length - 1);\n      if (number < lineNumberStart) {\n        number = lineNumberStart;\n      }\n      if (number > lineNumberEnd) {\n        number = lineNumberEnd;\n      }\n      var lineIndex = number - lineNumberStart;\n      return lineNumberRows.children[lineIndex];\n    },\n    /**\n     * Resizes the line numbers of the given element.\n     *\n     * This function will not add line numbers. It will only resize existing ones.\n     *\n     * @param {HTMLElement} element A `<pre>` element with line numbers.\n     * @returns {void}\n     */\n    resize: function (element) {\n      resizeElements([element]);\n    },\n    /**\n     * Whether the plugin can assume that the units font sizes and margins are not depended on the size of\n     * the current viewport.\n     *\n     * Setting this to `true` will allow the plugin to do certain optimizations for better performance.\n     *\n     * Set this to `false` if you use any of the following CSS units: `vh`, `vw`, `vmin`, `vmax`.\n     *\n     * @type {boolean}\n     */\n    assumeViewportIndependence: true\n  };\n\n  /**\n   * Resizes the given elements.\n   *\n   * @param {HTMLElement[]} elements\n   */\n  function resizeElements(elements) {\n    elements = elements.filter(function (e) {\n      var codeStyles = getStyles(e);\n      var whiteSpace = codeStyles['white-space'];\n      return whiteSpace === 'pre-wrap' || whiteSpace === 'pre-line';\n    });\n    if (elements.length == 0) {\n      return;\n    }\n    var infos = elements.map(function (element) {\n      var codeElement = element.querySelector('code');\n      var lineNumbersWrapper = element.querySelector('.line-numbers-rows');\n      if (!codeElement || !lineNumbersWrapper) {\n        return undefined;\n      }\n\n      /** @type {HTMLElement} */\n      var lineNumberSizer = element.querySelector('.line-numbers-sizer');\n      var codeLines = codeElement.textContent.split(NEW_LINE_EXP);\n      if (!lineNumberSizer) {\n        lineNumberSizer = document.createElement('span');\n        lineNumberSizer.className = 'line-numbers-sizer';\n        codeElement.appendChild(lineNumberSizer);\n      }\n      lineNumberSizer.innerHTML = '0';\n      lineNumberSizer.style.display = 'block';\n      var oneLinerHeight = lineNumberSizer.getBoundingClientRect().height;\n      lineNumberSizer.innerHTML = '';\n      return {\n        element: element,\n        lines: codeLines,\n        lineHeights: [],\n        oneLinerHeight: oneLinerHeight,\n        sizer: lineNumberSizer\n      };\n    }).filter(Boolean);\n    infos.forEach(function (info) {\n      var lineNumberSizer = info.sizer;\n      var lines = info.lines;\n      var lineHeights = info.lineHeights;\n      var oneLinerHeight = info.oneLinerHeight;\n      lineHeights[lines.length - 1] = undefined;\n      lines.forEach(function (line, index) {\n        if (line && line.length > 1) {\n          var e = lineNumberSizer.appendChild(document.createElement('span'));\n          e.style.display = 'block';\n          e.textContent = line;\n        } else {\n          lineHeights[index] = oneLinerHeight;\n        }\n      });\n    });\n    infos.forEach(function (info) {\n      var lineNumberSizer = info.sizer;\n      var lineHeights = info.lineHeights;\n      var childIndex = 0;\n      for (var i = 0; i < lineHeights.length; i++) {\n        if (lineHeights[i] === undefined) {\n          lineHeights[i] = lineNumberSizer.children[childIndex++].getBoundingClientRect().height;\n        }\n      }\n    });\n    infos.forEach(function (info) {\n      var lineNumberSizer = info.sizer;\n      var wrapper = info.element.querySelector('.line-numbers-rows');\n      lineNumberSizer.style.display = 'none';\n      lineNumberSizer.innerHTML = '';\n      info.lineHeights.forEach(function (height, lineNumber) {\n        wrapper.children[lineNumber].style.height = height + 'px';\n      });\n    });\n  }\n\n  /**\n   * Returns style declarations for the element\n   *\n   * @param {Element} element\n   */\n  function getStyles(element) {\n    if (!element) {\n      return null;\n    }\n    return window.getComputedStyle ? getComputedStyle(element) : element.currentStyle || null;\n  }\n  var lastWidth = undefined;\n  window.addEventListener('resize', function () {\n    if (config.assumeViewportIndependence && lastWidth === window.innerWidth) {\n      return;\n    }\n    lastWidth = window.innerWidth;\n    resizeElements(Array.prototype.slice.call(document.querySelectorAll('pre.' + PLUGIN_NAME)));\n  });\n  Prism.hooks.add('complete', function (env) {\n    if (!env.code) {\n      return;\n    }\n    var code = /** @type {Element} */env.element;\n    var pre = /** @type {HTMLElement} */code.parentNode;\n\n    // works only for <code> wrapped inside <pre> (not inline)\n    if (!pre || !/pre/i.test(pre.nodeName)) {\n      return;\n    }\n\n    // Abort if line numbers already exists\n    if (code.querySelector('.line-numbers-rows')) {\n      return;\n    }\n\n    // only add line numbers if <code> or one of its ancestors has the `line-numbers` class\n    if (!Prism.util.isActive(code, PLUGIN_NAME)) {\n      return;\n    }\n\n    // Remove the class 'line-numbers' from the <code>\n    code.classList.remove(PLUGIN_NAME);\n    // Add the class 'line-numbers' to the <pre>\n    pre.classList.add(PLUGIN_NAME);\n    var match = env.code.match(NEW_LINE_EXP);\n    var linesNum = match ? match.length + 1 : 1;\n    var lineNumbersWrapper;\n    var lines = new Array(linesNum + 1).join('<span></span>');\n    lineNumbersWrapper = document.createElement('span');\n    lineNumbersWrapper.setAttribute('aria-hidden', 'true');\n    lineNumbersWrapper.className = 'line-numbers-rows';\n    lineNumbersWrapper.innerHTML = lines;\n    if (pre.hasAttribute('data-start')) {\n      pre.style.counterReset = 'linenumber ' + (parseInt(pre.getAttribute('data-start'), 10) - 1);\n    }\n    env.element.appendChild(lineNumbersWrapper);\n    resizeElements([pre]);\n    Prism.hooks.run('line-numbers', env);\n  });\n  Prism.hooks.add('line-numbers', function (env) {\n    env.plugins = env.plugins || {};\n    env.plugins.lineNumbers = true;\n  });\n})();","map":{"version":3,"names":["Prism","document","PLUGIN_NAME","NEW_LINE_EXP","config","plugins","lineNumbers","getLine","element","number","tagName","classList","contains","lineNumberRows","querySelector","lineNumberStart","parseInt","getAttribute","lineNumberEnd","children","length","lineIndex","resize","resizeElements","assumeViewportIndependence","elements","filter","e","codeStyles","getStyles","whiteSpace","infos","map","codeElement","lineNumbersWrapper","undefined","lineNumberSizer","codeLines","textContent","split","createElement","className","appendChild","innerHTML","style","display","oneLinerHeight","getBoundingClientRect","height","lines","lineHeights","sizer","Boolean","forEach","info","line","index","childIndex","i","wrapper","lineNumber","window","getComputedStyle","currentStyle","lastWidth","addEventListener","innerWidth","Array","prototype","slice","call","querySelectorAll","hooks","add","env","code","pre","parentNode","test","nodeName","util","isActive","remove","match","linesNum","join","setAttribute","hasAttribute","counterReset","run"],"sources":["C:/Projetos/apl-web-study-sphere/node_modules/prismjs/plugins/line-numbers/prism-line-numbers.js"],"sourcesContent":["(function () {\n\n\tif (typeof Prism === 'undefined' || typeof document === 'undefined') {\n\t\treturn;\n\t}\n\n\t/**\n\t * Plugin name which is used as a class name for <pre> which is activating the plugin\n\t *\n\t * @type {string}\n\t */\n\tvar PLUGIN_NAME = 'line-numbers';\n\n\t/**\n\t * Regular expression used for determining line breaks\n\t *\n\t * @type {RegExp}\n\t */\n\tvar NEW_LINE_EXP = /\\n(?!$)/g;\n\n\n\t/**\n\t * Global exports\n\t */\n\tvar config = Prism.plugins.lineNumbers = {\n\t\t/**\n\t\t * Get node for provided line number\n\t\t *\n\t\t * @param {Element} element pre element\n\t\t * @param {number} number line number\n\t\t * @returns {Element|undefined}\n\t\t */\n\t\tgetLine: function (element, number) {\n\t\t\tif (element.tagName !== 'PRE' || !element.classList.contains(PLUGIN_NAME)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar lineNumberRows = element.querySelector('.line-numbers-rows');\n\t\t\tif (!lineNumberRows) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar lineNumberStart = parseInt(element.getAttribute('data-start'), 10) || 1;\n\t\t\tvar lineNumberEnd = lineNumberStart + (lineNumberRows.children.length - 1);\n\n\t\t\tif (number < lineNumberStart) {\n\t\t\t\tnumber = lineNumberStart;\n\t\t\t}\n\t\t\tif (number > lineNumberEnd) {\n\t\t\t\tnumber = lineNumberEnd;\n\t\t\t}\n\n\t\t\tvar lineIndex = number - lineNumberStart;\n\n\t\t\treturn lineNumberRows.children[lineIndex];\n\t\t},\n\n\t\t/**\n\t\t * Resizes the line numbers of the given element.\n\t\t *\n\t\t * This function will not add line numbers. It will only resize existing ones.\n\t\t *\n\t\t * @param {HTMLElement} element A `<pre>` element with line numbers.\n\t\t * @returns {void}\n\t\t */\n\t\tresize: function (element) {\n\t\t\tresizeElements([element]);\n\t\t},\n\n\t\t/**\n\t\t * Whether the plugin can assume that the units font sizes and margins are not depended on the size of\n\t\t * the current viewport.\n\t\t *\n\t\t * Setting this to `true` will allow the plugin to do certain optimizations for better performance.\n\t\t *\n\t\t * Set this to `false` if you use any of the following CSS units: `vh`, `vw`, `vmin`, `vmax`.\n\t\t *\n\t\t * @type {boolean}\n\t\t */\n\t\tassumeViewportIndependence: true\n\t};\n\n\t/**\n\t * Resizes the given elements.\n\t *\n\t * @param {HTMLElement[]} elements\n\t */\n\tfunction resizeElements(elements) {\n\t\telements = elements.filter(function (e) {\n\t\t\tvar codeStyles = getStyles(e);\n\t\t\tvar whiteSpace = codeStyles['white-space'];\n\t\t\treturn whiteSpace === 'pre-wrap' || whiteSpace === 'pre-line';\n\t\t});\n\n\t\tif (elements.length == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar infos = elements.map(function (element) {\n\t\t\tvar codeElement = element.querySelector('code');\n\t\t\tvar lineNumbersWrapper = element.querySelector('.line-numbers-rows');\n\t\t\tif (!codeElement || !lineNumbersWrapper) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\t/** @type {HTMLElement} */\n\t\t\tvar lineNumberSizer = element.querySelector('.line-numbers-sizer');\n\t\t\tvar codeLines = codeElement.textContent.split(NEW_LINE_EXP);\n\n\t\t\tif (!lineNumberSizer) {\n\t\t\t\tlineNumberSizer = document.createElement('span');\n\t\t\t\tlineNumberSizer.className = 'line-numbers-sizer';\n\n\t\t\t\tcodeElement.appendChild(lineNumberSizer);\n\t\t\t}\n\n\t\t\tlineNumberSizer.innerHTML = '0';\n\t\t\tlineNumberSizer.style.display = 'block';\n\n\t\t\tvar oneLinerHeight = lineNumberSizer.getBoundingClientRect().height;\n\t\t\tlineNumberSizer.innerHTML = '';\n\n\t\t\treturn {\n\t\t\t\telement: element,\n\t\t\t\tlines: codeLines,\n\t\t\t\tlineHeights: [],\n\t\t\t\toneLinerHeight: oneLinerHeight,\n\t\t\t\tsizer: lineNumberSizer,\n\t\t\t};\n\t\t}).filter(Boolean);\n\n\t\tinfos.forEach(function (info) {\n\t\t\tvar lineNumberSizer = info.sizer;\n\t\t\tvar lines = info.lines;\n\t\t\tvar lineHeights = info.lineHeights;\n\t\t\tvar oneLinerHeight = info.oneLinerHeight;\n\n\t\t\tlineHeights[lines.length - 1] = undefined;\n\t\t\tlines.forEach(function (line, index) {\n\t\t\t\tif (line && line.length > 1) {\n\t\t\t\t\tvar e = lineNumberSizer.appendChild(document.createElement('span'));\n\t\t\t\t\te.style.display = 'block';\n\t\t\t\t\te.textContent = line;\n\t\t\t\t} else {\n\t\t\t\t\tlineHeights[index] = oneLinerHeight;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tinfos.forEach(function (info) {\n\t\t\tvar lineNumberSizer = info.sizer;\n\t\t\tvar lineHeights = info.lineHeights;\n\n\t\t\tvar childIndex = 0;\n\t\t\tfor (var i = 0; i < lineHeights.length; i++) {\n\t\t\t\tif (lineHeights[i] === undefined) {\n\t\t\t\t\tlineHeights[i] = lineNumberSizer.children[childIndex++].getBoundingClientRect().height;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tinfos.forEach(function (info) {\n\t\t\tvar lineNumberSizer = info.sizer;\n\t\t\tvar wrapper = info.element.querySelector('.line-numbers-rows');\n\n\t\t\tlineNumberSizer.style.display = 'none';\n\t\t\tlineNumberSizer.innerHTML = '';\n\n\t\t\tinfo.lineHeights.forEach(function (height, lineNumber) {\n\t\t\t\twrapper.children[lineNumber].style.height = height + 'px';\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Returns style declarations for the element\n\t *\n\t * @param {Element} element\n\t */\n\tfunction getStyles(element) {\n\t\tif (!element) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn window.getComputedStyle ? getComputedStyle(element) : (element.currentStyle || null);\n\t}\n\n\tvar lastWidth = undefined;\n\twindow.addEventListener('resize', function () {\n\t\tif (config.assumeViewportIndependence && lastWidth === window.innerWidth) {\n\t\t\treturn;\n\t\t}\n\t\tlastWidth = window.innerWidth;\n\n\t\tresizeElements(Array.prototype.slice.call(document.querySelectorAll('pre.' + PLUGIN_NAME)));\n\t});\n\n\tPrism.hooks.add('complete', function (env) {\n\t\tif (!env.code) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar code = /** @type {Element} */ (env.element);\n\t\tvar pre = /** @type {HTMLElement} */ (code.parentNode);\n\n\t\t// works only for <code> wrapped inside <pre> (not inline)\n\t\tif (!pre || !/pre/i.test(pre.nodeName)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Abort if line numbers already exists\n\t\tif (code.querySelector('.line-numbers-rows')) {\n\t\t\treturn;\n\t\t}\n\n\t\t// only add line numbers if <code> or one of its ancestors has the `line-numbers` class\n\t\tif (!Prism.util.isActive(code, PLUGIN_NAME)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remove the class 'line-numbers' from the <code>\n\t\tcode.classList.remove(PLUGIN_NAME);\n\t\t// Add the class 'line-numbers' to the <pre>\n\t\tpre.classList.add(PLUGIN_NAME);\n\n\t\tvar match = env.code.match(NEW_LINE_EXP);\n\t\tvar linesNum = match ? match.length + 1 : 1;\n\t\tvar lineNumbersWrapper;\n\n\t\tvar lines = new Array(linesNum + 1).join('<span></span>');\n\n\t\tlineNumbersWrapper = document.createElement('span');\n\t\tlineNumbersWrapper.setAttribute('aria-hidden', 'true');\n\t\tlineNumbersWrapper.className = 'line-numbers-rows';\n\t\tlineNumbersWrapper.innerHTML = lines;\n\n\t\tif (pre.hasAttribute('data-start')) {\n\t\t\tpre.style.counterReset = 'linenumber ' + (parseInt(pre.getAttribute('data-start'), 10) - 1);\n\t\t}\n\n\t\tenv.element.appendChild(lineNumbersWrapper);\n\n\t\tresizeElements([pre]);\n\n\t\tPrism.hooks.run('line-numbers', env);\n\t});\n\n\tPrism.hooks.add('line-numbers', function (env) {\n\t\tenv.plugins = env.plugins || {};\n\t\tenv.plugins.lineNumbers = true;\n\t});\n\n}());\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}